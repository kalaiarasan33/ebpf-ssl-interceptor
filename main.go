// Attach probes to openSSL3 SSL_read and SSL_write

//go:build arm64

package main

import (
	"bytes"
	"encoding/binary"
	"errors"
	"log"
	"os"
	"os/signal"
	"syscall"

	"github.com/cilium/ebpf/link"
	"github.com/cilium/ebpf/ringbuf"
	"github.com/cilium/ebpf/rlimit"
	"golang.org/x/sys/unix"
)

//go:generate go run github.com/cilium/ebpf/cmd/bpf2go -target arm64 -type data_event  bpf probes.c -- -I../headers

const (
	// The path to the binary we want to trace. If it were a symbol defined in a process, we'd point it
	// there. In our case, we want to trace anything that uses this particular symbol from libssl.so.3, so
	// we point there rather than the binary that is using it.
	// You'll need to update this to point to the path of the library on your system! Use "ldd `which curl`" to find it.
	binPath = "/lib/aarch64-linux-gnu/libssl.so.3"
)

func main() {
	stopper := make(chan os.Signal, 1)
	signal.Notify(stopper, os.Interrupt, syscall.SIGTERM)

	// Allow the current process to lock memory for eBPF resources.
	if err := rlimit.RemoveMemlock(); err != nil {
		log.Fatal(err)
	}

	// Load pre-compiled programs and maps into the kernel.
	objs := bpfObjects{}
	if err := loadBpfObjects(&objs, nil); err != nil {
		log.Fatalf("loading objects: %s", err)
	}

	defer objs.Close()

	// kp, err := link.Kprobe("sys_execve", objs.KprobeExecve, nil)
	// if err != nil {
	// 	log.Fatalf("opening kprobe: %s", err)
	// }
	// defer kp.Close()

	// Open an ELF binary and read its symbols.
	ex, err := link.OpenExecutable(binPath)
	if err != nil {
		log.Fatalf("opening executable: %s", err)
	}

	uprobeSSLWrite, err := ex.Uprobe("SSL_write", objs.UprobeSslWrite, nil)

	if err != nil {
		log.Fatalf("openning u ssl_write %s", err)
	}
	defer uprobeSSLWrite.Close()

	uretprobeSSLWrite, err := ex.Uretprobe("SSL_write", objs.UretprobeSslWrite, nil)

	if err != nil {
		log.Fatalf("openning uret ssl_write %s", err)
	}
	defer uretprobeSSLWrite.Close()

	uprobeSSLRead, err := ex.Uprobe("SSL_read", objs.UprobeSslRead, nil)

	if err != nil {
		log.Fatalf("openning u ssl_read %s", err)
	}
	defer uprobeSSLRead.Close()

	uretprobeSSLRead, err := ex.Uretprobe("SSL_read", objs.UretprobeSslRead, nil)

	if err != nil {
		log.Fatalf("openning uret ssl_read %s", err)
	}
	defer uretprobeSSLRead.Close()

	// Open a ringbuf reader from userspace RINGBUF map described in the
	// eBPF C program.
	rd, err := ringbuf.NewReader(objs.DataEventMap)
	if err != nil {
		log.Fatalf("opening ringbuf reader: %s", err)
	}
	defer rd.Close()

	// Close the reader when the process receives a signal, which will exit
	// the read loop.
	go func() {
		<-stopper

		if err := rd.Close(); err != nil {
			log.Fatalf("closing ringbuf reader: %s", err)
		}
	}()

	log.Println("Waiting for events..")

	// bpfEvent is generated by bpf2go.
	var event bpfDataEvent
	for {
		record, err := rd.Read()
		if err != nil {
			if errors.Is(err, ringbuf.ErrClosed) {
				log.Println("Received signal, exiting..")
				return
			}
			log.Printf("reading from reader: %s", err)
			continue
		}
		// Parse the ringbuf event entry into a bpfEvent structure.
		if err := binary.Read(bytes.NewBuffer(record.RawSample), binary.LittleEndian, &event); err != nil {
			log.Printf("parsing ringbuf event: %s", err)
			continue
		}

		flow := "sent"
		if event.Traffic == 1 {
			flow = "recieved"
		}
		log.Printf("===================================================")
		log.Printf("Pid: %d \n", event.Pid)
		log.Printf("Traffic  %s\n ", flow)
		log.Printf("Data: %s\n", unix.ByteSliceToString(event.Buf[:]))
		log.Printf("===================================================")
	}

}
